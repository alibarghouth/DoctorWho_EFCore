// <auto-generated />
using System;
using DoctorWho.Db.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorWho.Db.Migrations
{
    [DbContext(typeof(DoctorWhoCoreDbContext))]
    [Migration("20230508160506_CreateFnCompanions")]
    partial class CreateFnCompanions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorWho.Db.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Auther1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Auther2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Auther3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Auther4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Auther5"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Companion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoPlayed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Companion1",
                            WhoPlayed = "WhoPlayed1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Companion2",
                            WhoPlayed = "WhoPlayed2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Companion3",
                            WhoPlayed = "WhoPlayed3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Companion4",
                            WhoPlayed = "WhoPlayed4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Companion5",
                            WhoPlayed = "WhoPlayed5"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstEpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1999, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstEpisodeDate = new DateTime(2000, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Doctor",
                            Number = "0599728416"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1999, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstEpisodeDate = new DateTime(2000, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Doctor2",
                            Number = "0599728416"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1999, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstEpisodeDate = new DateTime(2000, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Doctor3",
                            Number = "0599728416"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1999, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstEpisodeDate = new DateTime(2000, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Doctor4",
                            Number = "0599728416"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1999, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstEpisodeDate = new DateTime(2000, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastEpisodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Doctor5",
                            Number = "0599728416"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Enemies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description1",
                            Name = "Name1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description2",
                            Name = "Name2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description3",
                            Name = "Name3"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description4",
                            Name = "Name4"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description5",
                            Name = "Name5"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("Episodetype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EpsodeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            DoctorId = 2,
                            EpisodeNumber = 234,
                            Episodetype = "type1",
                            EpsodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "notes1",
                            SeriesNumber = 123,
                            Title = "title1"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            DoctorId = 3,
                            EpisodeNumber = 234,
                            Episodetype = "type1",
                            EpsodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "notes1",
                            SeriesNumber = 123,
                            Title = "title1"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 4,
                            DoctorId = 4,
                            EpisodeNumber = 234,
                            Episodetype = "type1",
                            EpsodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "notes1",
                            SeriesNumber = 123,
                            Title = "title1"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            DoctorId = 5,
                            EpisodeNumber = 234,
                            Episodetype = "type1",
                            EpsodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "notes1",
                            SeriesNumber = 123,
                            Title = "title1"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            DoctorId = 2,
                            EpisodeNumber = 234,
                            Episodetype = "type1",
                            EpsodeDate = new DateTime(2000, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "notes1",
                            SeriesNumber = 123,
                            Title = "title1"
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.Model.EpisodeCompanion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanionId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanionId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeCompanions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanionId = 5,
                            EpisodeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompanionId = 2,
                            EpisodeId = 4
                        },
                        new
                        {
                            Id = 3,
                            CompanionId = 4,
                            EpisodeId = 5
                        },
                        new
                        {
                            Id = 4,
                            CompanionId = 2,
                            EpisodeId = 2
                        },
                        new
                        {
                            Id = 5,
                            CompanionId = 1,
                            EpisodeId = 1
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.Model.EpisodeEnemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeEnemies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnemyId = 2,
                            EpisodeId = 3
                        },
                        new
                        {
                            Id = 2,
                            EnemyId = 1,
                            EpisodeId = 4
                        },
                        new
                        {
                            Id = 3,
                            EnemyId = 4,
                            EpisodeId = 3
                        },
                        new
                        {
                            Id = 4,
                            EnemyId = 5,
                            EpisodeId = 2
                        },
                        new
                        {
                            Id = 5,
                            EnemyId = 5,
                            EpisodeId = 2
                        });
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Episode", b =>
                {
                    b.HasOne("DoctorWho.Db.Model.Author", "Author")
                        .WithMany("Episodes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.Model.Doctor", "Doctor")
                        .WithMany("Episodes")
                        .HasForeignKey("DoctorId");

                    b.Navigation("Author");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorWho.Db.Model.EpisodeCompanion", b =>
                {
                    b.HasOne("DoctorWho.Db.Model.Companion", "Companion")
                        .WithMany("EpisodeCompanions")
                        .HasForeignKey("CompanionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.Model.Episode", "Episode")
                        .WithMany("EpisodeCompanions")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companion");

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("DoctorWho.Db.Model.EpisodeEnemy", b =>
                {
                    b.HasOne("DoctorWho.Db.Model.Enemy", "Enemy")
                        .WithMany("EpisodeEnemies")
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWho.Db.Model.Episode", "Episode")
                        .WithMany("EpisodeEnemies")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Author", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Companion", b =>
                {
                    b.Navigation("EpisodeCompanions");
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Doctor", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Enemy", b =>
                {
                    b.Navigation("EpisodeEnemies");
                });

            modelBuilder.Entity("DoctorWho.Db.Model.Episode", b =>
                {
                    b.Navigation("EpisodeCompanions");

                    b.Navigation("EpisodeEnemies");
                });
#pragma warning restore 612, 618
        }
    }
}
